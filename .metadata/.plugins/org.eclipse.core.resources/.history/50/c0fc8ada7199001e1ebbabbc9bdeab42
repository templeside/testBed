package controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import entity.AuthRequest;
import entity.UserInfo;
import service.JwtService;
import service.UserInfoService;

@RestController
@RequestMapping("/auth")
public class UserController {
	@Autowired
	private UserInfoService service;		// 서비스임.
	
	@Autowired
	private JwtService jwtService;			// 서비스임.
	
	@Autowired
	private AuthenticationManager authenticationManager;	//predefined function.
	
	@GetMapping("/welcome")					// http get function 받음. return string.
	public String welcome() {
		return "Welcome this endpoint is not secure";
	}
	
	@PostMapping("/addNewUser")
	public String addNewUser(@RequestBody UserInfo userInfo) {		// RequestBody가 들어옴.
		return service.addUser(userInfo);
	}
	
	@GetMapping("/user/userProfile")
	@PreAuthorize("hasAuthority('ROLE_USER')")		// hasAuthority라는 function이 있으면 가능.
	public String userProfile() {
		return "Welcome to User Profile";
	}
	
	@GetMapping("/admin/adminProfile")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")		// hasAuthority 있을 떄 가능..
	public String adminProfile() {
		return "Welcome to Admin Profile";
	}
	
	@PostMapping("/generateToken")					// PostMapping 이후에도 
	public String authenticateAndGetToken(@RequestBody AuthRequest authRequest) {	// AuthRequest entity 만들어야 함.
		Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(authRequest.getUsername(), authRequest.getPassword()));
		if(authentication.isAuthenticated())
			return jwtService.generateToken(authRequest.getUsername(), authRequest.getPassword());			// 여기서 jwt 만들어 냄.
		else
			throw new UsernameNotFoundException("invalid user request!");		// invalid authentication
	}
}
